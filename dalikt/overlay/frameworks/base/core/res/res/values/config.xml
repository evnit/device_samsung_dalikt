<?xml version="1.0" encoding="utf-8"?>
<!--
/*
** Copyright 2011, The Android Open Source Project
**
** Licensed under the Apache License, Version 2.0 (the "License");
** you may not use this file except in compliance with the License.
** You may obtain a copy of the License at
**
**     http://www.apache.org/licenses/LICENSE-2.0
**
** Unless required by applicable law or agreed to in writing, software
** distributed under the License is distributed on an "AS IS" BASIS,
** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
** See the License for the specific language governing permissions and
** limitations under the License.
*/
-->

<!-- These resources are around just to allow their values to be customized
     for different hardware and product builds. -->
<resources>

    <!-- Array of light sensor LUX values to define our levels for auto backlight brightness support.
         The N entries of this array define N + 1 zones as follows:

         Zone 0:        0 <= LUX < array[0]
         Zone 1:        array[0] <= LUX < array[1]
         ...
         Zone N:        array[N - 1] <= LUX < array[N]
         Zone N + 1:    array[N] <= LUX < infinity

         Must be overridden in platform specific overlays -->
    <integer-array name="config_autoBrightnessLevels">
        <item>15</item>
        <item>150</item>
        <item>1500</item>
        <item>15000</item>
    </integer-array>

    <!-- Array of output values for LCD backlight corresponding to the LUX values
         in the config_autoBrightnessLevels array.  This array should have size one greater
         than the size of the config_autoBrightnessLevels array.
         This must be overridden in platform specific overlays -->
    <integer-array name="config_autoBrightnessLcdBacklightValues">
        <item>40</item>
        <item>100</item>
        <item>150</item>
        <item>210</item>
        <item>255</item>
    </integer-array>

    <!-- Array of output values for button backlight corresponding to the LUX values
         in the config_autoBrightnessLevels array.  This array should have size one greater
         than the size of the config_autoBrightnessLevels array.
         This must be overridden in platform specific overlays -->
    <integer-array name="config_autoBrightnessButtonBacklightValues">
        <item>255</item>
        <item>255</item>
        <item>0</item>
        <item>0</item>
        <item>0</item>
    </integer-array>

    <!-- Array of output values for keyboard backlight corresponding to the LUX values
         in the config_autoBrightnessLevels array.  This array should have size one greater
         than the size of the config_autoBrightnessLevels array.
         This must be overridden in platform specific overlays -->
    <integer-array name="config_autoBrightnessKeyboardBacklightValues">
        <item>255</item>
        <item>255</item>
        <item>0</item>
        <item>0</item>
        <item>0</item>
    </integer-array>

    <!-- Minimum screen brightness allowed by the power manager. -->
    <integer name="config_screenBrightnessDim">20</integer>
    
    <!-- Device supports LED flashlight -->
    <!--<bool name="config_enableTorch">true</bool>-->
    
    <!-- Is the notification LED intrusive? Used to decide if there should be a disable option -->
    <bool name="config_intrusiveNotificationLed">true</bool>
    
    <!-- If supported, are dreams enabled? (by default) -->
    <bool name="config_dreamsEnabledByDefault">false</bool>
	
	<!-- If true, the screen can be rotated via the accelerometer in all 4
	rotations as the default behavior. -->
	<bool name="config_allowAllRotations">true</bool>

	<!-- If true, the direction rotation is applied to get to an application's requested
	orientation is reversed. Normally, the model is that landscape is
	clockwise from portrait; thus on a portrait device an app requesting
	landscape will cause a clockwise rotation, and on a landscape device an
	app requesting portrait will cause a counter-clockwise rotation. Setting
	true here reverses that logic. -->
	<bool name="config_reverseDefaultRotation">false</bool>

	<!-- Disable lockscreen rotation by default -->
	<bool name="config_enableLockScreenRotation">true</bool>

	<!-- Device has a h/w rotation lock switch -->
	<!--<bool name="config_hasRotationLockSwitch">false</bool>-->
   
    <!-- Doze: force using accelerometer as pick up sensor
    <bool name="config_dozeUseAccelerometer">true</bool> -->
<!-- Doze mode -->		
	<string name="config_dozeComponent">com.android.systemui/com.android.systemui.doze.DozeService</string>		
	<integer name="config_screenBrightnessDoze">1</integer>		
	<bool name="config_dozeAfterScreenOff">true</bool>		
	<bool name="config_powerDecoupleInteractiveModeFromDisplay">true</bool>
</resources>
